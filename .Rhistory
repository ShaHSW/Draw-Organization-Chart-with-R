c1 <- with(mtcars, apply(mpg,cyl,mean))
c1 <- with(mtcars, tapply(mpg,cyl,mean))
mapply(list,1:4,4:!)
a<- mapply(list, 1:4, 4:1)
a
?mapply
?gl
traceback(mean)
traceback(mean())
trackback(a)
?trackback
?debug
example(debug)
debug(sapply)
a <- debug(sapply)
a
?broser
trackback()
traceback()
mean(b)
trackback()
traceback()
mean(xy)
traceback()
debug(mean)
mean(a ,4)
nn
if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
warning("argument is not numeric or logical: returning NA")
return(NA_real_)
}
if (na.rm)
x <- x[!is.na(x)]
,
d.
data(mtcars)
?tapply
a <- mtcars[mtcars$cyl == "4"]
a <- mtcars[mtcars$cyl == "4",]
a
b <- mtcars[mtcars$cyl == "8",]
abs(mean(a)-mean(b))
a$hp
x <- tapply(mtcars$hp, mtcars$hp, mean)
x['4'] - x['8']
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
debug(ls)
ls
?str
str(a)
str(mtcars)
set.seed(1)
rnomr(10,20,4)
rnorm(10,20,4)
rnorm(10,20,4)
set.seed(1)
set.seed(1)
rnorm(10,20,4)
system.time()
?Rprof
rpois(5, 2)
?dnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 1
x1<- 2
x2 <-2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$Total.time
a <- Rprof()
fit <- lm(y ~ x1 + x2)
a
a1 <- Rprof(NULL)
a1
rpois(5, 2)
swirl()
library(swirl)
install.packges("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages('goolgeViz')
library(googleViz)
library(googleVis)
install.packages('googleVis')
library(googleVis)
region
Regions
Org <- gvisOrgChart(Regions,
options=list(width=600, height=250,
size='large', allowCollapse=TRUE))
plot(Org)
setwd("~/GitHub/OrgChart")
fname <- file.choose()
fname
?dir.choose
?choose.dir
drawOrgChart <- function(dataInput){
dataSrc <- read.csv(dataInput,header = T)
data_gf <- graph.data.frame(dataSrc, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = T
)
}
drawOrgChart(fname)
library(igraph)
drawOrgChart <- function(dataInput){
dataSrc <- read.csv(dataInput,header = T)
data_gf <- graph.data.frame(dataSrc, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = T
)
}
drawOrgChart(fname)
drawOrgChart(fname)
dataSrc <- read.csv("orgChartData.csv", header = T)
View(dataSrc)
temp <- merge(dataSrc, dataSrc, by.x = "EmpName", by.y = "EmpManager")
View(temp)
temp <- merge(dataSrc, dataSrc, by = "EmpManager")
View(temp)
lookup <- dataSrc[,"EmpName", "EmpTitle"]
lookup <- dataSrc[,c("EmpName", "EmpTitle")]
View(lookup)
temp <- merge(dataSrc, lookup, Src, by = "EmpManager")
View(temp)
colnames(lookup) <- c("EmpManager", "MgrTitle")
View(lookup)
temp <- merge(dataSrc, lookup, Src, by = "EmpManager")
View(temp)
dataSrc <- read.csv("orgChartData.csv", header = T)
temp <- merge(dataSrc, lookup, Src, by = "EmpManager")
View(temp)
lookup <- dataSrc[,c("EmpName", "EmpTitle")]
View(lookup)
temp <- merge(dataSrc, lookup, Src, by.x = "EmpName", by.y = "EmpName" )
View(temp)
temp <- merge(dataSrc, lookup, Src, by.x = "EmpManager", by.y = "EmpName" )
View(temp)
temp <- merge(dataSrc, lookup, Src, by.x = "EmpManager", by.y = "EmpName", all.x = T )
View(temp)
colnames(temp$"EmpTitle.y") <- c("MgrTitle")
View(temp)
temp$"EmpTitle.y"
colnames(temp$"EmpTitle.y") <- "MgrTitle"
View(temp)
colnames(temp$"EmpTitle.y") <- "MgrTitle"
View(temp)
colnames(temp)[,"EmpTitle.y"] <- "MgrTitle"
View(temp)
colnames(temp)["EmpTitle.y"] <- "MgrTitle"
View(temp)
colnames(temp)[7] <- "MgrTitle"
View(temp)
names(temp)[names(temp) == "EmpTitle.y"] <- "MgrTitle"
View(temp)
temp <- merge(dataSrc, lookup, Src, by.x = "EmpManager", by.y = "EmpName", all.x = T )
View(temp)
names(temp)[names(temp) == "EmpTitle.y"] <- "MgrTitle"
View(temp)
names(temp)[names(temp) == c("EmpTitle,x","EmpTitle.y"] <- c("EmpTitle","MgrTitle")
View(temp)
names(temp)[names(temp) == c("EmpTitle.x","EmpTitle.y"] <- c("EmpTitle","MgrTitle")
View(temp)
names(temp)[names(temp) == c("EmpTitle.x","EmpTitle.y")] <- c("EmpTitle","MgrTitle")
View(temp)
setnames(temp, old = c("EmpTitle.x","EmpTitle.y"), new = c("EmpTitle", "MgrTitle"))
View(temp)
temp <- merge(dataSrc, lookup, Src, by.x = "EmpManager", by.y = "EmpName", all.x = T )
names(temp)[match(c("EmpTitle.x","EmpTitle.y"), names(x))] <- c("EmpTitle", "MgrTitle"))
View(temp)
names(temp)[match(c("EmpTitle.x","EmpTitle.y"), names(x))] <- c("EmpTitle", "MgrTitle")
View(temp)
names(temp)[match(c("EmpTitle.x","EmpTitle.y"), names(temp))] <- c("EmpTitle", "MgrTitle")
View(temp)
dataInput <- temp[c("EmpTitle", "MgrTitle","EmpName", "EmpManager", "EmpDept", "FloorNum")]
View(dataInput)
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataSrc, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = T
)
}
drawOrgChart(dataInput)
dataInput <- temp[c("EmpTitle", "MgrTitle","EmpName", "EmpManager", "EmpDept", "FloorNum")]
View(dataInput)
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataInput, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = T
)
}
drawOrgChart(dataInput)
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataInput, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = F
)
}
drawOrgChart(dataInput)
# cc-chart --start
split_OrgChart <- function(dataInput, param){
data_cc <- split(dataInput, dataInput$param)
for(i in 1:length(unique(data_cc$param))){
cc_gf <- graph.data.frame(data_cc[[i]],directed=T)
plot(cc_gf,
main = c('Orgranizational Chart',paste(param,dataInput[[i]][1,3])),
edge.arrow.size=0.5,
edge.curved = T)
#dev.copy(png,file=paste('OC_CC_',dataInput[[i]][1,3],'.png'))
#dev.off()
}
}
split_OrgChart(dataInput, "EmpDept")
split_OrgChart <- function(inputSrc, param){
input_cc <- split(inputSrc, inputSrc$param)
for(i in 1:length(unique(input_cc$param))){
cc_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(cc_gf,
main = c('Orgranizational Chart',paste(param,inputSrc[[i]][1,3])),
edge.arrow.size=0.5,
edge.curved = T)
#dev.copy(png,file=paste('OC_CC_',dataInput[[i]][1,3],'.png'))
#dev.off()
}
}
split_OrgChart(dataInput, "EmpDept")
split_OrgChart <- function(inputSrc, param){
input_cc <- split(inputSrc, inputSrc$param)
for(i in 1:length(unique(input_cc$param))){
cc_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(cc_gf,
main = "Test",
edge.arrow.size=0.5,
edge.curved = T)
#dev.copy(png,file=paste('OC_CC_',dataInput[[i]][1,3],'.png'))
#dev.off()
}
}
split_OrgChart(dataInput, "EmpDept")
a <- split(dataInput,"EmpDept")
a
b <- unique(dataInput$"EmpDept")
b1 <- length(b)
b1
a[[4]]
a
a <- split(dataInput,EmpDept)
a <- split(dataInput, "EmpDept")
a
? split
a <- split(dataInput, dataInput$"EmpDept")
a
a[[4]]
is.data.frame(dataInput)
split_OrgChart <- function(inputSrc, param){
input_cc <- split(inputSrc, inputSrc$param)
for(i in 1:length(unique(input_cc$param))){
cc_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(cc_gf,
main = "Test",
edge.arrow.size=0.5,
edge.curved = T)
#dev.copy(png,file=paste('OC_CC_',dataInput[[i]][1,3],'.png'))
#dev.off()
}
}
split_OrgChart(dataInput, "EmpDept")
cc <- graph.data.frame(a[[4]], directed = T)
plot(cc)
split_OrgChart <- function(df, para){
input_cc <- split(df, df$para)
for(i in 1:length(unique(df$para))){
cc_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(cc_gf,
main = "Test",
edge.arrow.size=0.5,
edge.curved = T)
#dev.copy(png,file=paste('OC_CC_',dataInput[[i]][1,3],'.png'))
#dev.off()
}
}
split_OrgChart(dataInput, "EmpDept")
split_OrgChart <- function(df, para){
input_cc <- split(df, df$para)
len <- length(unique(df$para))
for(i in 1:len){
df_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(dataInput, "EmpDept")
dataInput <- temp[c("EmpTitle", "MgrTitle","EmpName", "EmpManager", "EmpDept", "FloorNum")]
View(dataInpu
View(dataInput)
split_OrgChart(dataInput, "EmpDept")
dataInput$EmpDept
(a<- split(dataInput$"EmpDept"))
(a<- split(dataInput$EmpDept))
(a<- split(dataInput,dataInput$EmpDept))
(a<- split(dataInput,dataInput$"EmpDept))
.
""
""
''
(a<- split(dataInput,dataInput$"EmpDept"))
split_OrgChart <- function(df, para){
input_cc <- split(df, df$para)
input_cc
len <- length(unique(df$para))
len
for(i in 1:len){
df_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(dataInput, "EmpDept")
a <- split(dadtaInput,dataInput$"EmpDept")
a <- dataInput
View(a)
split_OrgChart(a, "FloorNum")
aa <- split(a,a$EmpDept)
len <- length(unique(a$EmpDept))
split_OrgChart <- function(df){
for(i in 1:7){
df_gf <- graph.data.frame(input_cc[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(aa)
split_OrgChart <- function(df){
for(i in 1:7){
df_gf <- graph.data.frame(aa[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(aa)
aa <- split(df,df$EmpDept)
len <- length(unique(df$EmpDept))
split_OrgChart(aa)
split_df <- split(df,df$EmpDept)
len <- length(unique(df$EmpDept))
a <- dataInput
# cc-chart --start
split_OrgChart <- function(df){
df_split <- split(df,df$EmpDept)
len <- length(unique(df$EmpDept))
for(i in 1:7){
df_gf <- graph.data.frame(df_split[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(a)
split_OrgChart <- function(df, para){
df_split <- split(df,df$para)
len <- length(unique(df$para))
for(i in 1:7){
df_gf <- graph.data.frame(df_split[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(a,"EmpDept")
# Function for draw Org Chart By department
split_OrgChart <- function(df){
# Split dataset with split function
df_split <- split(df,df$EmpDept)
# Get the length of splitted dataset
len <- length(unique(df$EmpDept))
for(i in 1:len){
df_gf <- graph.data.frame(aa[[i]],directed=T)
plot(df_gf)
}
}
split_OrgChart(dataInput)
split_OrgChart <- function(df){
# Split dataset with split function
df_split <- split(df,df$EmpDept)
# Get the length of splitted dataset
len <- length(unique(df$EmpDept))
for(i in 1:len){
df_gf <- graph.data.frame(df_split[[i]],directed=T)
plot(df_gf,
main = c('Orgranizational Chart',paste('Cost Center No.',df_split[[i]][1,5])),
edge.arrow.size=0.5,
edge.curved = F)
dev.copy(png,file=paste('Department: ', df_split[[i]][1,5],'.png'))
dev.off()
}
}
split_OrgChart(dataInput)
split_OrgChart <- function(df, para){
# Split dataset with split function
df_split <- split(df,df$para)
# Get the length of splitted dataset
len <- length(unique(df$para))
for(i in 1:len){
df_gf <- graph.data.frame(df_split[[i]],directed=T)
plot(df_gf,
main = c('Orgranizational Chart',paste('Cost Center No.',df_split[[i]][1,5])),
edge.arrow.size=0.5,
edge.curved = F)
dev.copy(png,file=paste('Department: ', df_split[[i]][1,5],'.png'))
dev.off()
}
}
split_OrgChart(dataInput,'EmpDept')
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataInput, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = F
)
}
# Draw Org Chart
drawOrgChart(dataInput)
# Organization Chart Function
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataInput, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = F
)
dev.copy(png,file='OrgChart.png'))
dev.off()
}
# Draw Org Chart
drawOrgChart(dataInput)
# Organization Chart Function
drawOrgChart <- function(dataInput){
data_gf <- graph.data.frame(dataInput, directed = T)
plot(data_gf,
main = 'Organization Chart',
vertex.label = V(data_gf)$Title,
vertex.label.font = 15,
vertex.size = 15,
vertex.size2 = 30,
edge.arrow.size=0.2,
edge.curved = F
)
dev.copy(png,file='OrgChart.png'))
dev.off()
}
# Draw Org Chart
drawOrgChart(dataInput)
split_OrgChart <- function(df){
# Split dataset with split function
df_split <- split(df,df$EmpDept)
# Get the length of splitted dataset
len <- length(unique(df$EmpDept))
for(i in 1:len){
df_gf <- graph.data.frame(df_split[[i]],directed=T)
plot(df_gf,
main = c('Orgranizational Chart',paste('Cost Center No.',df_split[[i]][1,5])),
edge.arrow.size=0.5,
edge.curved = F)
dev.copy(png,file=paste('Department: ', df_split[[i]][1,5],'.png'))
dev.off()
}
}
split_OrgChart(dataInput)
